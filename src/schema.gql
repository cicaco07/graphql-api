# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type AuthResponse {
  access_token: String!
  user: User!
}

type BattleSpell {
  cooldown: Float!
  createdAt: DateTime!
  description: String!
  icon: String!
  id: ID!
  name: String!
  tag: [String!]!
  updatedAt: DateTime!
}

input CreateBattleSpellInput {
  cooldown: Float!
  description: String!
  icon: String!
  name: String!
  tag: [String!]!
}

input CreateEmblemInput {
  attributes: JSON
  benefit: String
  cooldown: String
  description: String
  icon: String!
  name: String!
  type: String!
}

input CreateHeroInput {
  alias: String!
  avatar: String!
  control_effect: Float!
  difficulty: Float!
  durability: Float!
  image: String!
  name: String!
  offense: Float!
  release_date: DateTime!
  role: [String!]!
  short_description: String!
  skills: [CreateSkillInput!]
  type: [String!]!
}

input CreateItemInput {
  attributes: [String!]!
  description: [String!]
  image: String!
  name: String!
  parent_items: [String!]
  price: Float!
  story: String
  tag: String
  tips: String
  type: String!
}

input CreateNavigationInput {
  component: String
  description: String
  icon: String
  is_active: Boolean! = true
  is_header: Boolean! = false
  is_visible: Boolean! = true
  level: Int! = 0
  name: String!
  order: Int!
  parent_id: ID
  permissions: [String!]
  roles: [String!]!
  route: String
}

input CreateSkillDetailInput {
  attributes: JSON!
  level: Int!
}

input CreateSkillInput {
  attack_effect: Float
  full_description: String!
  lite_description: String!
  name: String!
  skill_icon: String!
  skills_detail: [CreateSkillDetailInput!]
  tag: [String!]!
  type: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Emblem {
  _id: ID!
  attributes: JSON
  benefit: String
  cooldown: String
  description: String
  icon: String!
  name: String!
  type: String!
}

type Hero {
  _id: ID!
  alias: String!
  avatar: String!
  control_effect: Float!
  difficulty: Float!
  durability: Float!
  image: String!
  name: String!
  offense: Float!
  release_date: DateTime!
  role: [String!]!
  short_description: String!
  skills: [Skill!]
  type: [String!]!
}

type Item {
  _id: ID!
  attributes: [String!]!
  description: [String!]!
  image: String!
  name: String!
  parent_items: [ID!]
  price: Int!
  story: String
  tag: String
  tips: String
  type: String!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

input LoginInput {
  email: String!
  password: String!
}

type LogoutResponse {
  message: String!
}

type Mutation {
  addSkillDetailToSkill(
    input: [CreateSkillDetailInput!]!
    skillId: ID!
  ): [SkillDetail!]!
  addSkillToHero(heroId: ID!, input: CreateSkillInput!): Skill!
  createBattleSpell(
    createBattleSpellInput: CreateBattleSpellInput!
  ): BattleSpell!
  createEmblem(input: CreateEmblemInput!): Emblem!
  createHero(input: CreateHeroInput!): Hero!
  createHeroWithSkill(input: CreateHeroInput!): Hero!
  createHeroWithSkillandSkillDetail(input: CreateHeroInput!): Hero!
  createItem(input: CreateItemInput!): Item!
  createNavigation(
    createNavigationInput: CreateNavigationInput!
  ): NavigationType!
  createSkill(input: CreateSkillInput!): Skill!
  createSkillDetail(input: CreateSkillDetailInput!): SkillDetail!
  deleteUser(userId: String!): Boolean!
  login(loginInput: LoginInput!): AuthResponse!
  logout: LogoutResponse!
  logoutEverywhere: LogoutResponse!
  register(registerInput: RegisterInput!): AuthResponse!
  removeBattleSpell(id: String!): Boolean!
  removeEmblem(id: ID!): Emblem!
  removeHero(id: ID!): Hero!
  removeItem(id: ID!): Item!
  removeNavigation(id: ID!): Boolean!
  removeSkill(id: ID!): Skill!
  removeSkillDetail(id: ID!): SkillDetail!
  seedNavigations: Boolean!
  updateBattleSpell(
    id: String!
    updateBattleSpellInput: UpdateBattleSpellInput!
  ): BattleSpell!
  updateEmblem(id: ID!, input: UpdateEmblemInput!): Emblem!
  updateHero(id: ID!, input: UpdateHeroInput!): Hero!
  updateHeroWithSkills(
    fromHeroId: ID!
    input: CreateSkillInput!
    skillId: ID!
    toHeroId: ID!
  ): Skill!
  updateItem(id: ID!, input: UpdateItemInput!): Item!
  updateNavigation(
    updateNavigationInput: UpdateNavigationInput!
  ): NavigationType!
  updateSkill(id: ID!, input: UpdateSkillInput!): Skill!
  updateSkillDetail(id: ID!, input: UpdateSkillDetailInput!): SkillDetail!
  updateSkillDetailToSkill(
    input: UpdateSkillDetailInput!
    skillDetailId: ID!
    skillId: ID!
  ): SkillDetail!
  updateUserRole(updateUserRoleInput: UpdateUserRoleInput!): User!
}

type NavigationType {
  _id: ID!
  children: [NavigationType!]
  component: String
  createdAt: DateTime!
  description: String
  icon: String
  is_active: Boolean!
  is_header: Boolean!
  is_visible: Boolean!
  level: Int!
  name: String!
  order: Int!
  parent_id: ID
  permissions: [String!]!
  roles: [String!]!
  route: String
  updatedAt: DateTime!
}

type Query {
  battleSpell(id: String!): BattleSpell!
  battleSpells: [BattleSpell!]!
  childrenItems(parentId: ID!): [Item!]!
  emblem(id: ID!): Emblem!
  emblems: [Emblem!]!
  getAllNavigations: [NavigationType!]!
  getAllUsers: [User!]!
  getNavigationById(id: ID!): NavigationType!
  getNavigationTree: [NavigationType!]!
  getUserNavigations: [NavigationType!]!
  hero(id: ID!): Hero!
  heroByName(name: String!): [Hero!]!
  heroes: [Hero!]!
  isTokenValid: Boolean!
  item(id: ID!): Item!
  items: [Item!]!
  me: User!
  skill(id: ID!): Skill!
  skillDetail(id: ID!): SkillDetail!
  skillDetails: [SkillDetail!]!
  skills: [Skill!]!
}

input RegisterInput {
  email: String!
  name: String!
  password: String!
  role: String
}

type Skill {
  _id: ID!
  attack_effect: Float
  full_description: String!
  lite_description: String!
  name: String!
  skill_icon: String!
  skills_detail: [SkillDetail!]
  tag: [String!]!
  type: String!
}

type SkillDetail {
  _id: ID!
  attributes: JSON
  level: Float
}

input UpdateBattleSpellInput {
  cooldown: Float
  description: String
  icon: String
  id: ID!
  name: String
  tag: [String!]
}

input UpdateEmblemInput {
  attributes: JSON
  benefit: String
  cooldown: String
  description: String
  icon: String
  name: String
  type: String
}

input UpdateHeroInput {
  alias: String
  avatar: String
  control_effect: Float
  difficulty: Float
  durability: Float
  image: String
  name: String
  offense: Float
  release_date: DateTime
  role: [String!]
  short_description: String
  skills: [CreateSkillInput!]
  type: [String!]
}

input UpdateItemInput {
  attributes: [String!]
  description: [String!]
  image: String
  name: String
  parent_items: [String!]
  price: Float
  story: String
  tag: String
  tips: String
  type: String
}

input UpdateNavigationInput {
  _id: ID!
  component: String
  description: String
  icon: String
  is_active: Boolean
  is_header: Boolean
  is_visible: Boolean
  level: Int
  name: String
  order: Int
  parent_id: ID
  permissions: [String!]
  roles: [String!]
  route: String
}

input UpdateSkillDetailInput {
  attributes: JSON
  level: Int
}

input UpdateSkillInput {
  attack_effect: Float
  full_description: String
  lite_description: String
  name: String
  skill_icon: String
  skills_detail: [CreateSkillDetailInput!]
  tag: [String!]
  type: String
}

input UpdateUserRoleInput {
  role: String!
  userId: String!
}

type User {
  _id: ID!
  createdAt: DateTime!
  email: String!
  name: String!
  role: String!
  updatedAt: DateTime!
}
